Write a Java program using JDBC to update the grade of a student as follows: take as input from the terminal/console 
  ID  course_id  sec_id  semester  year grade 
(separated by spaces) and update the grade of an existing tuple in the takes relation; but also, depending on change from pass to fail or vice-versa, update the students tot_cred correctly.  

NOTE 1:  null and F are fail grades, all other grades are pass grades; grade values provided by the user above can be assumed to be valid grades, and you can assume the user will not type null as a grade.  

NOTE 2: We assume for simplicity that a student who has already passed the course will not be allowed to take it again.)

NOTE 3: You can assume that tot_cred is not null;


Both updates should be done as part of the same transaction by turning off auto commit, and issuing a connection.commit() at the end. (In case there is no matching takes tuple, output a corresponding message; in your assignment you are checking for old value of grade, so the check will happen there, but in other situations this can be done by using the result of executeUpdate() which returns the number of rows updated.) 

Make sure in case of errors (such as no matching takes tuple), or exceptions, a connection.rollback() is issued instead.  

You can use the template given below when writing your code (you may also refer to the file Ass4A_Part2.java on moodle, which builds on the same template).

What to submit: You will submit a Java file Ass4APart1_<roll_no>.java with a main() that does the above.

NOTE: You must write all your code on your own; we will be performing plagiarism detection on your code.

try (java.sql.Connection conn = DriverManager.getConnection(url, user, pass))
{
       conn.setAutoCommit(false);
       try(PreparedStatement stmt1 = …; 
             PreparedStatement  stmt2 = …;
             ... )
       {
               ….
               rs1 = stmt1.executeQuery(); // can cause SQLException
               rs2 = stmt2.execute(Query); // can cause SQLException
               conn.commit();         // also can cause SQLException!
       }
       catch(Exception ex) {
               conn.rollback();
               throw ex; /* Other exception handling will be done at outer level */
       } finally {
               conn.setAutoCommit(true);
       }
}
catch(Exception e) {
       e.printStackTrace();
}

Part 2)  SQL injection
Create a copy of the instructor table using the following command:
CREATE TABLE instructordup as SELECT * from instructor;

A JDBC program Ass4A_Part2.java has been provided to you. This program takes the id of an instructor and updates their salary by 10%. You will find two functions noPrepStmt(...) and withPrepStmt(...) that perform the above task without using prepared statements and with using prepared statements, respectively; the latter one is empty, you will have to fill in the code.

Now, run both the functions for the following inputs. You may uncomment the call to the corresponding function in main() to test that function. Report your observations for each input.
10101 (or some name that exists in your instructordup table)
 ’ OR 1=1 -- 
 ‘; DROP TABLE instructordup -- 
NOTE: DO NOT try doing this on any production systems in IITB or outside, you may be punished severely.

What to submit: You will submit a Java file Ass4APart2_<roll_no>.java with the updated code above, and a text file Ass4APart2_<roll_no>.txt with your observations for each input for noPrepStmt(...) and withPrepStmt(...). Template is given below:

noPrepStmt: 
1.
2.
3.
withPrepStmt:
1.
2.
3.

Part 1:  Create a Java class ResultSetOutput with two static methods toHTML() and toJSON() which take as argument a JDBC ResultSet,
and prinout out the result in HTML and JSON format respectively, using ResultSet metadata functions.

For HTML, the result should be printed as a table, with a header containing column names, followed by the data. E.g. 
    <table>
        <tr><th>ID</th> <th>name</th></tr> 
        <tr> <td>1234</td> <td>John</td> </tr>
        <tr> <td>6789</td> <td>Shyam</td> </tr>
    </table>

For JSON, the result should be a JSON object with a header: attribute which is an array of column names, and a 
data: attribute, which is an array of objects, one per row, where the object for a row has attribute:value pairs for each attribute of the row.
E.g.  {"header": ["ID", "name"], 
          "data": [ {"ID:"1234", "name":"John"}, 
                     {"ID":"6789", "name":"Shyam"}
                   ]
         }

Write a function that takes an SQL query as input from the terminal (in a single line) and executes the query and 
prints the resultset in the HTML and JSON formats.  

Use the JsonObject interface documented in 
   https://docs.oracle.com/javaee/7/api/javax/json/JsonObject.html  
to build the JSON object using Json.createObjectBuilder(), and use the toString() method to get and print the string representation of the JSON object.

What to submit: You will submit a Java file Ass4B_Part1_<roll_no1>_<roll_no2>.java with a main() that does the above.

Part 2:  Parts-Explosion

  Consider a device that has many parts, with the root part called root, where each part has a local cost, and may have subparts, with a subpart possibly occurring multiple times in a part.  This information is represented by the following relations.

    part(ID, localcost)

    subpart(pID, spID, number)

where number indicates how many times spID occurs in pID.  Here is some sample data 

     part(‘root’, 100),  part(‘wheel’, 50), part(‘tyre’, 20), part(‘engine’, 200),

     subpart(‘root’, ‘engine’, 1), subpart(‘root’, ‘wheel’, 4), subpart(‘wheel’, ‘tyre’, 1) 

The cost of a part is computed from its local cost and the cost of its subparts (which in turn may depend on the cost of their subparts, and so on).  In the above example, the cost of wheel is 70, and of root is 580.

To compute the cost, you should perform an aggregation in JDBC code, based on a topological sort of subpart.  
You must do the topological ordering using SQL, by a recursive query of the following form:

      heights(ID, 1) if part(ID, …)

      heights(ID, i+1) if   subpart(ID, ID1, n) and heights(ID1, i)

and define maxheight(ID, height) is the maximum of heights for that ID.  

NOTE: to avoid infinite recursion in case there is a cycle in the input, you should add a condition that height < 100 (or any other limit) in the recursive definition.  Such cycles should not occur in a correct subpart hierarchy, this is just for error handling.


Your JDBC program should create a temporary relation cost(ID, cost), which is initially empty; executeUpdate() can be passed DDL commands, and to create a temporary table use the syntax  create temporary table ... .  Note that two concurrent executions of the program will see their own tables, and will not conflict.

It should then consider part IDs in increasing order of their maxheight, and compute the 
cost based on the local cost plus the already computed costs of the subparts (if any), and save 
the computed cost of ID in the cost relation.  

At the end it should look up the cost of the part ID taken from the terminal and print it out.

The input should be part IDs entered one per line from the terminal (have a loop so we can test on multiple IDs),
and the output should be of the form:
   ID   cost
with each ID in a line by itself.  Terminate on end of file (ctrl-D from terminal/console).



What to submit: You will submit a Java file Ass4B_Part2_<roll_no1>_<roll_no2>.java with a main() that does the above.

Table definitions and sample data:

create table part( 
    ID varchar(20) primary key, 
    cost int);
create table subpart (
    pID varchar(20) references part,
    spID varchar(20) references part,
    number int);
insert into part values ('root', 100), ('wheel', 50), ('engine', 200), ('tyre', 20);
insert into subpart values ('root', 'engine', 1), ('root', 'wheel', 4), ('wheel', 'tyre', 1);
